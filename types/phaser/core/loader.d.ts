export class Loader {
    constructor(game: any);
    game: any;
    cache: any;
    isLoading: boolean;
    isUseLog: boolean;
    isUseRetry: boolean;
    maxRetry: number;
    hasLoaded: boolean;
    preloadSprite: {
        sprite: any;
        direction: number;
        width: any;
        height: any;
        rect: any;
    };
    crossOrigin: boolean;
    baseURL: string;
    path: string;
    headers: {
        requestedWith: boolean;
        json: string;
        xml: string;
    };
    onLoadStart: Signal;
    onLoadComplete: Signal;
    onPackComplete: Signal;
    onFileStart: Signal;
    onFileComplete: Signal;
    onFileError: Signal;
    maxParallelDownloads: any;
    _withSyncPointDepth: number;
    _fileList: any[];
    _flightQueue: any[];
    _processingHead: number;
    _fileLoadStarted: boolean;
    _totalPackCount: number;
    _totalFileCount: number;
    _loadedPackCount: number;
    _loadedFileCount: number;
    setPreloadSprite(sprite: any, direction?: number): void;
    resize(): void;
    checkKeyExists(type: any, key: any): boolean;
    getAssetIndex(type: any, key: any): number;
    getAsset(type: any, key: any): {
        index: number;
        file: any;
    };
    reset(hard: any, clearEvents?: boolean): void;
    addToFileList(type: any, key?: string, url?: any, properties?: any, overwrite?: boolean, extension?: any): Loader;
    replaceInFileList(type: any, key: any, url: any, properties: any): Loader;
    pack(key: any, url: any, data: any, callbackContext: any): Loader;
    image(key: any, url: any, overwrite: any): Loader;
    images(keys: any, urls: any): Loader;
    text(key: any, url: any, overwrite: any): Loader;
    json(key: any, url: any, overwrite: any): Loader;
    xml(key: any, url: any, overwrite: any): Loader;
    spritesheet(key: any, url: any, frameWidth: any, frameHeight: any, frameMax?: number, margin?: number, spacing?: number): Loader;
    audio(key: any, urls: any, autoDecode?: boolean): Loader;
    audioSprite(key: any, urls: any, jsonURL: any, jsonData: any, autoDecode?: boolean): Loader;
    bitmapFont(key: any, textureURL?: any, atlasURL?: any, atlasData?: any, xSpacing?: number, ySpacing?: number): Loader;
    atlas(key: any, textureURL: any, atlasURL?: any, atlasData?: any, format?: number): Loader;
    withSyncPoint(callback: any, callbackContext: any): Loader;
    addSyncPoint(type: any, key: any): Loader;
    removeFile(type: any, key: any): void;
    removeAll(): void;
    start(): void;
    processLoadQueue(): void;
    finishedLoading(abnormal: any): void;
    asyncComplete(file: any, errorMessage?: string): void;
    processPack(pack: any): void;
    transformUrl(url: any, file: any): any;
    loadFile(file: any): void;
    loadImageTag(file: any): void;
    xhrLoad(file: any, url: any, type: any, onload: any, onerror: any): void;
    xhrLoadWithXDR(): void;
    getAudioURL(urls: any): any;
    fileError(file: any, xhr: any, reason: any): void;
    fileComplete(file: any, xhr: any): void;
    jsonLoadComplete(file: any, xhr: any): void;
    csvLoadComplete(): void;
    xmlLoadComplete(file: any, xhr: any): void;
    parseXml(data: any): any;
    updateProgress(): void;
    log(message: any, data?: string): void;
    totalLoadedFiles(): number;
    totalQueuedFiles(): number;
    totalLoadedPacks(): number;
    totalQueuedPacks(): number;
    get progressFloat(): number;
    get progress(): number;
}
import { Signal } from './signal';
//# sourceMappingURL=loader.d.ts.map