export const CANVAS: 0;
export const IMAGE: 1;
export const TEXTURE: 2;
export const SOUND: 3;
export const TEXT: 4;
export const BITMAPDATA: 5;
export const BITMAPFONT: 6;
export const JSON: 7;
export const XML: 8;
export const RENDER_TEXTURE: 9;
export class Cache {
    constructor(game: any);
    game: any;
    autoResolveURL: boolean;
    _cache: {
        canvas: {};
        image: {};
        texture: {};
        sound: {};
        text: {};
        json: {};
        xml: {};
        bitmapData: {};
        bitmapFont: {};
        renderTexture: {};
    };
    _urlMap: {};
    _urlResolver: HTMLImageElement;
    _urlTemp: string;
    onSoundUnlock: Signal;
    _cacheMap: {}[];
    addDefaultImage(): void;
    addMissingImage(): void;
    addImage(key: any, url: any, data: any): {
        key: any;
        url: any;
        data: any;
        base: BaseTexture;
        frame: Frame;
        frameData: FrameData;
    };
    addTextureAtlas(key: any, url: any, data: any, atlasData: any): void;
    addSound(key: any, url: any, data: any): void;
    addText(key: any, url: any, data: any): void;
    addBitmapFont(key: any, url: any, data: any, atlasData: any, atlasType: any, xSpacing?: number, ySpacing?: number): void;
    addJSON(key: any, url: any, data: any): void;
    addXML(key: any, url: any, data: any): void;
    reloadSound(key: any): void;
    reloadSoundComplete(key: any): void;
    updateSound(key: any, property: any, value: any): void;
    decodedSound(key: any, data: any): void;
    isSoundDecoded(key: any): any;
    isSoundReady(key: any): boolean;
    checkKey(cache: any, key: any): boolean;
    checkURL(url: any): boolean;
    checkCanvasKey(key: any): boolean;
    checkImageKey(key: any): boolean;
    checkTextureKey(key: any): boolean;
    checkSoundKey(key: any): boolean;
    checkTextKey(key: any): boolean;
    checkBitmapDataKey(key: any): boolean;
    checkBitmapFontKey(key: any): boolean;
    checkJSONKey(key: any): boolean;
    checkXMLKey(key: any): boolean;
    getItem(key: any, cache: any, method: any, property?: any): any;
    getCanvas(key: any): any;
    getImage(key?: string, full?: boolean): any;
    getTextureFrame(key: any): any;
    getSound(key: any): any;
    getSoundData(key: any): any;
    getText(key: any): any;
    getBitmapData(key: any): any;
    getBitmapFont(key: any): any;
    getJSON(key: any, isClone?: boolean): any;
    getXML(key: any): any;
    getRenderTexture(key: any): any;
    getBaseTexture(key: any, cache?: number): any;
    getFrame(key: any, cache?: number): any;
    getFrameCount(key: any, cache?: number): any;
    getFrameData(key: any, cache?: number): any;
    hasFrameData(key: any, cache?: number): boolean;
    updateFrameData(key: any, frameData: any, cache?: number): void;
    getFrameByIndex(key: any, index: any, cache?: number): any;
    getFrameByName(key: any, name: any, cache?: number): any;
    getURL(url: any): any;
    getKeys(cache?: number): string[];
    removeCanvas(key: any): void;
    removeImage(key: any, destroyBaseTexture?: boolean): void;
    removeSound(key: any): void;
    removeText(key: any): void;
    removeBitmapData(key: any): void;
    removeBitmapFont(key: any): void;
    removeJSON(key: any): void;
    removeXML(key: any): void;
    removeRenderTexture(key: any): void;
    removeSpriteSheet(key: any): void;
    removeTextureAtlas(key: any): void;
    clearGLTextures(): void;
    _resolveURL(url: any, data: any): string;
    destroy(): void;
}
import { Signal } from './signal';
import { BaseTexture } from '../display/webgl/base_texture';
import { Frame } from './frame';
import { FrameData } from './frame_data';
//# sourceMappingURL=cache.d.ts.map