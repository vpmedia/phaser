export default class _default {
    constructor(game: any);
    game: any;
    hitCanvas: object | null;
    hitContext: any;
    moveCallbacks: any[];
    lockCallbacks: any[];
    customCandidateHandler: any;
    customCandidateHandlerContext: any;
    pollRate: number;
    enabled: boolean;
    multiInputOverride: number;
    position: Point | null;
    speed: Point | null;
    circle: Circle | null;
    scale: Point | null;
    maxPointers: number;
    tapRate: number;
    doubleTapRate: number;
    holdRate: number;
    justPressedRate: number;
    justReleasedRate: number;
    recordPointerHistory: boolean;
    recordRate: number;
    recordLimit: number;
    pointer1: any;
    pointer2: any;
    pointer3: any;
    pointer4: any;
    pointer5: any;
    pointer6: any;
    pointer7: any;
    pointer8: any;
    pointer9: any;
    pointer10: any;
    pointers: any[];
    activePointer: Pointer | null;
    mousePointer: Pointer | null;
    mouse: Mouse | null;
    touch: Touch | null;
    mspointer: MSPointer | null;
    resetLocked: boolean;
    onDown: Signal | null;
    onUp: Signal | null;
    onTap: Signal | null;
    onHold: Signal | null;
    minPriorityID: number;
    interactiveItems: ArraySet;
    _localPoint: Point;
    _pollCounter: number;
    _oldPosition: Point | null;
    _x: number;
    _y: number;
    boot(): void;
    _onClickTrampoline: ((event: any) => void) | undefined;
    destroy(): void;
    setInteractiveCandidateHandler(callback: any, context: any): void;
    addMoveCallback(callback: any, context: any): void;
    deleteMoveCallback(callback: any, context: any): void;
    addPointer(): Pointer | null;
    update(): void;
    reset(hard?: boolean): void;
    resetSpeed(x: any, y: any): void;
    startPointer(event: any): any;
    updatePointer(event: any): any;
    stopPointer(event: any): any;
    countActivePointers(limit?: number): number;
    getPointer(isActive?: boolean): any;
    getPointerFromIdentifier(identifier: any): any;
    getPointerFromId(pointerId: any): any;
    getLocalPosition(displayObject: any, pointer: any, output?: null): Point;
    hitTest(displayObject: any, pointer: any, localPoint: any): any;
    onClickTrampoline(): void;
    set x(arg: number);
    get x(): number;
    set y(arg: number);
    get y(): number;
    get pollLocked(): boolean;
    get totalInactivePointers(): number;
    get totalActivePointers(): number;
    get worldX(): number;
    get worldY(): number;
}
import { Point } from '../geom/point';
import { Circle } from '../geom/circle';
import Pointer from './input_pointer';
import Mouse from './input_mouse';
import Touch from './input_touch';
import MSPointer from './input_mspointer';
import { Signal } from './signal';
import ArraySet from './array_set';
//# sourceMappingURL=input.d.ts.map